/*
 * Copyright 2015-2019 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    id 'com.netflix.nebula.plugin-plugin' version '20.8.0'
    id "org.jetbrains.kotlin.jvm" version "1.8.0"
    id 'java-gradle-plugin'
}

dependencies {
    implementation enforcedPlatform("com.fasterxml.jackson:jackson-bom:2.9.10.+")

    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7' // Not a direct dependency but ensures alignment when we upgrade Kotlin
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8' // Not a direct dependency but ensures alignment when we upgrade Kotlin
    implementation 'com.netflix.nebula:nebula-gradle-interop:latest.release'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'com.netflix.nebula:nebula-dependency-recommender:latest.release'

    testImplementation gradleTestKit()
    testRuntimeOnly 'com.netflix.nebula:gradle-dependency-lock-plugin:latest.release'
}

apply from: 'gradle/idea.gradle'

description 'Gradle resolution rules plugin'

contacts {
    'nebula-plugins-oss@netflix.com' {
        moniker 'Nebula Plugins Maintainers'
        github 'nebula-plugins'
    }
}



tasks.integrationTest {
    maxParallelForks = (int) (Runtime.getRuntime().availableProcessors() / 2 + 1)
}

gradlePlugin {
    plugins {
        resolutionRules {
            id = 'com.netflix.nebula.resolution-rules'
            implementationClass = 'nebula.plugin.resolutionrules.ResolutionRulesPlugin'
            displayName = 'Gradle Resolution Rules plugin'
            description = project.description
            tags.set(['nebula', 'resolve', 'resolution', 'rules'])
        }
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

idea {
    project {
        jdkName = '1.8'
        languageLevel = '1.8'
    }
}


tasks.withType(GenerateModuleMetadata).configureEach {
    suppressedValidationErrors.add('enforced-platform')
}

javaCrossCompile {
    disableKotlinSupport = true
}
